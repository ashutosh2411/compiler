%%

%term
    EOF 
  | ID of string
  | INT of int  
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN   
  | LBRACE | RBRACE  
  | PLUS | MINUS | TIMES | DIVIDE | MOD | EQ | NEQ | LT | LE | GT | GE |EEQ
  | AND | OR | ASSIGN
  | IF | THEN | ELSE | WHILE | FOR   
  | BREAK  
  | true | false
 
%nonterm 
			start
		|	statements
		|	statement
		|	assignment_statement
		|	exp
		|	selection_statement
		|	iteration_statement
		|	bool_expression


(* Precedence Directives *)
%right      ELSE                                      (* Binding - Loose *)
%left       OR                                        (* | *)
%left       AND                                       (* | *)
%nonassoc   EQ NEQ LT LE GT GE                        (* | *)
%left       PLUS MINUS                                (* \/ *)
%left       TIMES DIVIDE  MOD                         (* Binding - Tight *)

%pos int 
%start start
%eop EOF
%noshift EOF


%%
(*grammer rules*)

start 
	: statements 							(statements)

statements 
	: statement  						( statement )
	| statement statements			( Ast.statements_(statement , statements ))


statement
	: SEMICOLON					()
	| assignment_statement SEMICOLON			(exp)
	| selection_statement				(selection_statement)
	| iteration_statement 				(iteration_statement)
	 
	

assignment_statement 
	: ID EQ exp 						(Ast.assign_ (ID , exp )) 
	
exp 
	: ID 								(Ast.id_ ID)
	| INT 								(Ast.int_ INT)
	| exp PLUS exp 						(Ast.exp_(PLUS , exp1 ,exp2))
	| exp MINUS exp 					(Ast.exp_(MINUS , exp1 ,exp2))
	| exp TIMES exp 					(Ast.exp_(TIMES , exp1 ,exp2))
	| exp DIVIDE exp 					(Ast.exp_(DIVIDE , exp1 ,exp2))
	| exp MOD exp 						(Ast.exp_(MOD , exp1 ,exp2))
	

selection_statement
	: IF LPAREN bool_expression RPAREN  statement    			     (Ast.ifonly_(bool_expression , statement))
	| IF LPAREN bool_expression RPAREN LBRACE statements RBRACE 			     (Ast.ifonly_(bool_expression , statements))
	| IF LPAREN bool_expression RPAREN  statement  ELSE  statement  		(Ast.ifelse_(bool_expression , statement1 , statement2))
	| IF LPAREN bool_expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE  (Ast.ifelse_(bool_expression , statements1 , statements2))
	 

iteration_statement
	: FOR LPAREN assignment_statement SEMICOLON bool_expression SEMICOLON assignment_statement RPAREN LBRACE statements RBRACE  (Ast.forloop_(assignment_statement , bool_expression ,assignment_statement , statements))
	(* | WHILE LPAREN bool_expression RPAREN LBRACE statements RBRACE    				(Ast.whileloop_(bool_expression , statements)) *)
	

bool_expression
	: exp EEQ exp     					(Ast.boolexp_( EEQ ,exp1 ,exp2))
	| exp NEQ exp 						(Ast.boolexp_( NEQ ,exp1 ,exp2))
	| exp GE exp 						(Ast.boolexp_( GE ,exp1 ,exp2))
	| exp GT exp 						(Ast.boolexp_( GT ,exp1 ,exp2))
	| exp LT exp 						(Ast.boolexp_( LT ,exp1 ,exp2))
	| exp LE exp 						(Ast.boolexp_( LE ,exp1 ,exp2))
	| true  							(Ast.bool_(true))
	| false 							(Ast.bool_(false))

	
