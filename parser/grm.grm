%%

%term
    EOF 
  | ID of string
  | INT of int  
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN   
  | LBRACE | RBRACE  
  | PLUS | MINUS | TIMES | DIVIDE | MOD | EQ | NEQ | LT | LE | GT | GE |EEQ

%nonterm 
			start
		|	statements
		|	statement
		|	assignment_statement
		|	exp


(* Precedence Directives *)
%right      ELSE                                      (* Binding - Loose *)
%left       OR                                        (* | *)
%left       AND                                       (* | *)
%nonassoc   EQ NEQ LT LE GT GE                        (* | *)
%left       PLUS MINUS                                (* \/ *)
%left       TIMES DIVIDE  MOD                         (* Binding - Tight *)

%pos int 
%start start
%eop EOF
%noshift EOF


%%
(*grammer rules*)

statements 
	: statement  						( statement )
   	| statement statements			( Ast.statements_(statement , statements ))


statement
	: SEMICOLON					()
	| assignment_statement SEMICOLON			(exp)
	 
	

assignment_statement 
	: ID EQ exp 						(Ast.assign_ (ID , exp )) 
	
exp 
	: ID 								(Ast.id_ ID)
	| INT 								(Ast.int_ INT)
	| exp PLUS exp 						(Ast.exp_(PLUS , exp1 ,exp2))
	| exp MINUS exp 					(Ast.exp_(MINUS , exp1 ,exp2))
	| exp TIMES exp 					(Ast.exp_(TIMES , exp1 ,exp2))
	| exp DIVIDE exp 					(Ast.exp_(DIVIDE , exp1 ,exp2))
	| exp MOD exp 						(Ast.exp_(MOD , exp1 ,exp2))
